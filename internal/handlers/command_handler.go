package handlers

import (
	"fmt"
	"geo_match_bot/internal/fsm"
	"log"
	"strconv"
	"strings"

	"github.com/bradfitz/gomemcache/memcache"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CommandHandler interface {
	HandleCommand(update tgbotapi.Update)
	HandleUnknownCommand(update tgbotapi.Update)
	HandleStart(update tgbotapi.Update)
	HandleProfile(update tgbotapi.Update)
}

func (h *UpdateHandler) HandleCommand(update tgbotapi.Update) {
	switch update.Message.Command() {
	case "start":
		h.HandleStart(update)
	case "profile":
		h.HandleProfile(update)
	case "main_menu":
		h.ShowMainMenu(update.Message.Chat.ID)
	case "current_visibility":
		h.HandleCurrentVisibility(update)
	case "toogle_visibility":
		h.HandleToogleVisibility(update)
	default:
		h.HandleUnknownCommand(update)
	}
}

func (h *UpdateHandler) HandleUnknownCommand(update tgbotapi.Update) {
	telegramID := update.Message.Chat.ID
	msg := tgbotapi.NewMessage(telegramID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start.")
	h.bot.Send(msg)
}

func (h *UpdateHandler) HandleStart(update tgbotapi.Update) {
	telegramID := update.Message.Chat.ID
	username := update.Message.From.UserName
	firstName := update.Message.From.FirstName
	lastName := update.Message.From.LastName

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.userRepository.GetUserByTelegramID(telegramID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		h.bot.Send(tgbotapi.NewMessage(telegramID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if user == nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
		err = h.userRepository.CreateUser(telegramID, username, firstName, lastName)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			h.bot.Send(tgbotapi.NewMessage(telegramID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		h.cache.Set(fmt.Sprintf("visibility:%d", telegramID), "false")

		// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–æ–ø—Ä–æ—Å–∞ –æ–± –∏–º–µ–Ω–∏
		h.bot.Send(tgbotapi.NewMessage(telegramID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"))
		h.fsm.SetState(telegramID, fsm.StepTitleName) // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
		return
	}

	// –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	h.ShowMainMenu(telegramID)
}

func (h *UpdateHandler) HandleProfile(update tgbotapi.Update) {
	telegramID := update.Message.Chat.ID
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.userRepository.GetUserByTelegramID(telegramID)
	if err != nil || user == nil {
		h.bot.Send(tgbotapi.NewMessage(telegramID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã photos
	photo, err := h.userRepository.GetUserPhoto(telegramID)
	if err == nil && photo != "" {
		// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
		photoMsg := tgbotapi.NewPhoto(telegramID, tgbotapi.FileID(photo))
		h.bot.Send(photoMsg)
	}

	commands, txt := fsm.GetCommandsInstance().Profile()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É
	_, err = h.bot.Request(tgbotapi.NewSetMyCommands(commands...))
	if err != nil {
		log.Panic(err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	profileText := fmt.Sprintf(
		`üë§  <b>–ò–º—è:</b> %s
	    üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> %d
	    ‚ö§  <b>–ü–æ–ª:</b> %s
	    üìÑ <b>–û —Å–µ–±–µ:</b> %s%s
	`, user.TitleName, user.Age, formatGender(user.Gender), user.Bio, txt)

	msg := tgbotapi.NewMessage(telegramID, profileText)
	msg.ParseMode = "HTML"

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
	h.bot.Send(msg)
}
func (h *UpdateHandler) HandleCurrentVisibility(update tgbotapi.Update) {
	telegramID := update.Message.Chat.ID
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	currentVisibilityStr, err := h.cache.Get(fmt.Sprintf("visibility:%d", telegramID))
	if err != nil {
		if err == memcache.ErrCacheMiss {
			h.cache.Set(fmt.Sprintf("visibility:%d", telegramID), "false")
			currentVisibilityStr = "false"
		} else {
			h.bot.Send(tgbotapi.NewMessage(telegramID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. %s", err.Error())))
			return
		}
	}
	visible, err := strconv.ParseBool(currentVisibilityStr)
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(telegramID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. %s", err.Error())))
		return
	}
	txt := ""
	if visible {
		txt = `–°–µ–π—á–∞—Å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è <b>–æ—Ç–∫–ª—é—á–µ–Ω–∞</b>, –æ–Ω –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ.`
	} else {
		txt = `–°–µ–π—á–∞—Å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è <b>–≤–∫–ª—é—á–µ–Ω–∞</b>, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ.`
	}
	txt += "\n–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /toogle_visibility"
	msg := tgbotapi.NewMessage(telegramID, txt)
	msg.ParseMode = "HTML"
	h.bot.Send(msg)
}

// TODO: –ù–ê–î–û –ó–ê–ü–†–ê–®–ò–í–ê–¢–¨ –õ–û–ö–ê–¶–ò–Æ –ü–†–ò –í–ö–õ–Æ–ß–ï–ù–ò–ò
func (h *UpdateHandler) HandleToogleVisibility(update tgbotapi.Update) {
	telegramID := update.Message.Chat.ID
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	currentVisibilityStr, err := h.cache.Get(fmt.Sprintf("visibility:%d", telegramID))
	if err != nil {
		if err == memcache.ErrCacheMiss {
			h.cache.Set(fmt.Sprintf("visibility:%d", telegramID), "false")
			currentVisibilityStr = "false"
		} else {
			h.bot.Send(tgbotapi.NewMessage(telegramID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. %s", err.Error())))
			return
		}
	}
	visible, err := strconv.ParseBool(currentVisibilityStr)
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(telegramID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. %s", err.Error())))
		return
	}

	h.cache.Set(fmt.Sprintf("visibility:%d", telegramID), strconv.FormatBool(!visible))
	var txt string
	if visible {
		txt = `–í—ã <b>–æ—Ç–∫–ª—é—á–∏–ª–∏</b> –≤–∏–¥–∏–º–æ—Å—Ç—å, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ.`
	} else {
		txt = `–í—ã <b>–≤–∫–ª—é—á–∏–ª–∏</b> –≤–∏–¥–∏–º–æ—Å—Ç—å, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ.`
	}
	txt += "\n–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/toogle_visibility</b>"
	msg := tgbotapi.NewMessage(telegramID, txt)
	msg.ParseMode = "HTML"
	h.bot.Send(msg)
}

func formatGender(gender string) string {
	switch strings.ToLower(gender) {
	case "–º":
		return "–ú—É–∂—Å–∫–æ–π ‚ôÇÔ∏è"
	case "–∂":
		return "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄÔ∏è"
	default:
		return "–ù–µ —É–∫–∞–∑–∞–Ω"
	}
}
